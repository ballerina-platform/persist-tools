/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

apply from: "${rootDir}/gradle/docker-compose-helper.gradle"

description = 'Ballerina - persist-tools Tooling Test'

def buildDir = "build";
def ballerinaDist = "$project.buildDir/jballerina-tools-${ballerinaLangVersion}"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def balToolFile = new File("$project.projectDir/resources/bal-tools.toml")

configurations {
    balTools
    dist {
        transitive true
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
    testImplementation group: 'info.picocli', name: 'picocli', version: '4.7.1'

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }

    testImplementation project(":persist-cli")
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation (group: 'mysql', name: 'mysql-connector-java', version: "${mySqlDriverVersion}") {
        transitive = false
    }
    testImplementation (group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: "${mssqlDriverVersion}") {
        transitive = false
    }
    testImplementation (group: 'org.postgresql', name: 'postgresql', version: "${postgresqlDriverVersion}") {
        transitive = false
    }
}

clean {
    delete "$project.projectDir/build"
    delete "$project.rootDir/target"
}

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
            copy {
                from(project.zipTree(artifact.getFile())) {
                    eachFile { fcd ->
                        fcd.relativePath = new RelativePath(!fcd.file.isDirectory(), fcd.relativePath.segments.drop(1))
                    }
                    includeEmptyDirs = false
                }
                into "${project.rootDir}/target/ballerina-distribution"
            }
        }
    }
    outputs.dir ballerinaDist
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

task pullGSheetsDependency() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            return exec {
                ignoreExitValue true
                String distributionBinPath = "${project.rootDir}/target/ballerina-distribution/bin"
                commandLine 'sh', '-c', "$distributionBinPath/bal pull ballerinax/googleapis.sheets"
            }.exitValue
        } else {
            return exec {
                ignoreExitValue true
                String distributionBinPath = "${project.rootDir}/target/ballerina-distribution/bin"
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat pull ballerinax/googleapis.sheets"
            }.exitValue
        }
    }
}

task copyStdlibs() {
    dependsOn(unpackStdLibs)

    /* Standard Libraries */
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
            copy {
                into ballerinaDist
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
            copy {
                def runtimePath = "${project.rootDir}/target/ballerina-distribution"
                into runtimePath
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
        }
    }
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

task copyTestResources(type: Copy) {
    into buildDir
    into("generated-sources/") {
        from "src/test/resources/test-src/input"
    }
    doNotTrackState("build needs to run every time")
}

task updateBalToolTomlFile {
    doLast {
        def newBallerinaToml = balToolFile.text.replace("@toml.version@", tomlVersion)
        // Add new bal-tools.toml file to the ballerina-distribution/resources directory
        def ballerinaTomlFile = new File("${ballerinaDist}/resources/bal-tools.toml")
        // create new file if it does not exist
        if (!ballerinaTomlFile.exists()) {
            ballerinaTomlFile.getParentFile().mkdirs()
            ballerinaTomlFile.createNewFile()
        }
        ballerinaTomlFile.text = newBallerinaToml
    }
}

// copy bala files from persist-tool/build/bala_unzipped/bala to ballerina-distribution/repo/bala
task copyPersistTool(type: Copy) {
    dependsOn(":persist-tool:build")
    // copy bal-tools.toml file to ballerina-distribution/resources directory
    dependsOn(updateBalToolTomlFile)
    into ballerinaDist
    into("repo/bala") {
        from "${project.rootDir}/persist-tool/build/bala_unzipped/bala"
    }
    doNotTrackState("build needs to run every time")
}

task copyTestPack(type: Copy) {
    dependsOn(copyStdlibs)
    dependsOn(copyTestResources)
    dependsOn(copyPersistTool)
    into buildDir
    into("ballerina-distribution/") {
        from ballerinaDist
    }
    doNotTrackState("build needs to run every time")
}

task startDockerContainers {
    group = 'Docker'
    description = 'Start test databases and wait for health checks'
    dependsOn dockerComposeUp
    dependsOn waitForServices
    waitForServices.mustRunAfter dockerComposeUp
}

task stopDockerContainers {
    group = 'Docker'
    description = 'Stop test databases'
    dependsOn dockerComposeDown
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":persist-cli-tests:copyTestPack")
checkstyleMain.dependsOn(":persist-cli-tests:copyTestPack")
spotbugsTest.dependsOn(":persist-cli-tests:copyTestPack")
spotbugsMain.dependsOn(":persist-cli-tests:copyTestPack")
jar.dependsOn(":persist-cli-tests:copyTestPack")
compileTestJava.dependsOn(":persist-cli-tests:copyTestPack")

spotbugsTest {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsMain {
    enabled false
}

checkstyleMain {
    enabled false
}

test {
    dependsOn(copyTestPack)
    systemProperty "ballerina.home", ballerinaDist
    dependsOn(copyTestResources)
    systemProperty "ballerina.offline.flag", "true"
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    def classFiles = new File("${rootDir}/persist-cli/build/classes/java/main/io/ballerina/persist")
    additionalClassDirs(classFiles)
    reports {
        xml.required = true
    }
}

test.dependsOn startDockerContainers
test.dependsOn pullGSheetsDependency
test.dependsOn ":persist-cli:build"
test.finalizedBy stopDockerContainers

build.doNotTrackState("build needs to run every time")
build.dependsOn ":persist-cli:build"
build.dependsOn copyTestPack
