/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - Persist-CLI Java Native'

repositories {
    mavenCentral()
}

configurations {
    implementation
    externalJars
}

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation (group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}") {
        exclude group: 'org.ballerinalang', module: 'maven-resolver'
    }
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'info.picocli', name: 'picocli', version: "${picocliVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'formatter-core', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}


spotbugsMain {
    enabled = true
    ignoreFailures = true
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = layout.buildDirectory.dir("reports/spotbugs")
    reports {
        //html.enabled true
        text.required = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    enabled = false
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion "${checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task createArtifactZip(type: Zip) {
    dependsOn build
    from 'build/libs/'
    into 'libs'
    archiveFileName = "persist-cli-${project.version}.zip"
    destinationDirectory = file("${projectDir}/build/zip")
}

clean {
    delete layout.buildDirectory
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "io.ballerina"
            artifactId "persist-tools"
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/persist-tools")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}
