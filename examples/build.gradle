/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

description = 'Ballerina - Persist Examples'

def ballerinaDist = "${project.buildDir}/ballerina-distribution"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def balToolFile = new File("$project.projectDir/resources/bal-tools.toml")
def examples = ["medical-center", "rainier"]
def introspectionExamples = ["hospital", "hospital_unsupported"]
def redisDBExamples = ["social_media", "redis_cache"]
def mockExamples = ["hospital_mock"]

configurations {
    balTools
    dist {
        transitive true
    }
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
            copy {
                from(project.zipTree(artifact.getFile())) {
                    eachFile { fcd ->
                        fcd.relativePath = new RelativePath(!fcd.file.isDirectory(), fcd.relativePath.segments.drop(1))
                    }
                    includeEmptyDirs = false
                }
                into "${project.buildDir}/ballerina-distribution"
            }
        }
    }
    outputs.dir ballerinaDist
}

task unpackStdLibs() {
    println("Unpacking standard libraries")
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs() {
    dependsOn(unpackStdLibs)
    println("Copying standard libraries to the distribution")
    /* Standard Libraries */
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
            copy {
                into ballerinaDist
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
            copy {
                def runtimePath = "${project.buildDir}/ballerina-distribution"
                into runtimePath
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
        }
    }
}

task updateBalToolTomlFile {
    doLast {
        def newBallerinaToml = balToolFile.text.replace("@toml.version@", tomlVersion)
        // Add new bal-tools.toml file to the ballerina-distribution/resources directory
        def ballerinaTomlFile = new File("${ballerinaDist}/resources/bal-tools.toml")
        // create new file if it does not exist
        if (!ballerinaTomlFile.exists()) {
            ballerinaTomlFile.getParentFile().mkdirs()
            ballerinaTomlFile.createNewFile()
        }
        ballerinaTomlFile.text = newBallerinaToml
    }
}

// copy bala files from persist-tool/build/bala_unzipped/bala to ballerina-distribution/repo/bala
task copyPersistTool(type: Copy) {
    dependsOn(":persist-tool:build")
    // copy bal-tools.toml file to ballerina-distribution/resources directory
    dependsOn(updateBalToolTomlFile)
    into ballerinaDist
    into("repo/bala") {
        from "${project.rootDir}/persist-tool/build/bala_unzipped/bala"
    }
    doNotTrackState("build needs to run every time")
}

task copyTestResources() {
    doLast() {
        copy {
            examples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            introspectionExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            redisDBExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            mockExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
    }

}

task initDbExamples {
    doLast {
        examples.each { example ->
            if (example != "gsheet_automation") {
                try {
                    exec {
                        copy {
                            from(file("${project.projectDir}/build/generated-examples/${example}/resources/mysql"))
                            into("${project.projectDir}/build/generated-examples/${example}")
                        }
                        delete "${project.projectDir}/build/generated-examples/${example}/generated"
                        delete "${project.projectDir}/build/generated-examples/${example}/modules"
                        workingDir "${project.projectDir}/build/generated-examples/${example}"
                        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                            commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist add --module=entities --datastore=mysql"
                        } else {
                            commandLine 'cmd', 'slmgr /dlv'
                            println('\n' + "Windows Instance detected")
                        }
                    }
                } catch (Exception e) {
                    println("Example '${example}' Generation failed: " + e.message)
                    throw e
                }
            }
        }
    }
}

task generateDbExamples {
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal build"
                    } else {
                        commandLine 'cmd', 'slmgr /dlv'
                        println('\n' + "Windows Instance detected")
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateInMemoryExamples {
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=inmemory --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=inmemory --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateIntrospectionExamples {
    doLast {
        introspectionExamples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=mysql --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=mysql --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateRedisDBExamples {
    doLast {
        redisDBExamples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=redis --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=redis --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateDBMockExamples {
    doLast {
        mockExamples.each { example ->
            try {
                exec {
                    copy {
                        from(file("${project.projectDir}/build/generated-examples/${example}/resources/mysql"))
                        into("${project.projectDir}/build/generated-examples/${example}/tests")
                    }
                    delete "${project.projectDir}/build/generated-examples/${example}/modules"
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=mysql --module=entities --test-datastore=h2"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=mysql --module=entities --test-datastore=h2"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateRedisMockExamples {
    doLast {
        mockExamples.each { example ->
            try {
                exec {
                    copy {
                        from(file("${project.projectDir}/build/generated-examples/${example}/resources/redis"))
                        into("${project.projectDir}/build/generated-examples/${example}/tests")
                    }
                    delete "${project.projectDir}/build/generated-examples/${example}/modules"
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=redis --module=entities --test-datastore=inmemory"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=redis --module=entities --test-datastore=inmemory"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

copyPersistTool.dependsOn ":persist-cli-tests:build"
copyPersistTool.dependsOn ":persist-cli:build"
copyPersistTool.dependsOn ":persist-tool:build"
copyTestResources.dependsOn copyPersistTool

