/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os
plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - persist-tools Tooling Test'

def buildDir = "build";

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation (group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}") {
        exclude group: 'org.ballerinalang', module: 'maven-resolver'
    }
    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation project(":persist-tools-native")
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation (group: 'mysql', name: 'mysql-connector-java', version: "${mySqlDriverVersion}") {
        transitive = false
    }
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

task copyTestResources(type: Copy) {
    into buildDir
    into("generated-sources/") {
        from "src/test/resources/test-src/input"
    }
}

def checkExecResult(execResult, failText, standardOutput) {
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)) {
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

def checkTestDockerContainerStatus(dockerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c',
                        "docker exec ${dockerName} mysqladmin ping -hlocalhost -uroot -pTest123# --silent"
            }.exitValue
        } catch (all) {
            return 1
        }
    }
}

task startTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --platform linux/amd64 --rm -d --name ballerina-persist-tools -e MYSQL_ROOT_PASSWORD="Test123#" -p 3307:3306 -t mysql:8.0.21'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(120 * 1000)
                healthCheck = checkTestDockerContainerStatus('ballerina-persist-tools')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-mysql' health test exceeded timeout!")
            }
        }
    } else {
        commandLine 'cmd','slmgr /dlv'
        println('\n' + "Windows Instance detected")
        println('\n' + "skippped starting the docker container")
    }
}

task stopTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop ballerina-persist-tools'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopTestDockerContainer task')
            }
        }
    }
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsTest {
    effort "max"
    reportLevel "Medium"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsMain {
    enabled false
}

checkstyleMain {
    enabled false
}

test {
    dependsOn(copyTestResources)
    dependsOn(startTestDockerContainer)
    systemProperty "ballerina.offline.flag", "true"
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    def classFiles = new File("${rootDir}/native/build/classes/java/main/io/ballerina/persist")
    additionalClassDirs(classFiles)
    reports {
        xml.enabled true
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test.dependsOn ":persist-tools-native:build"
test.dependsOn ":persist-tools-ballerina:build"
test.finalizedBy stopTestDockerContainer
