/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
}

ext.testngVersion = project.testngVersion

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://mvnrepository.com/artifact/org.testng/testng'
        }
    }
}

subprojects {
    apply plugin: 'java'
    configurations {
        externalJars
        ballerinaStdLibs
    }

    dependencies {
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:sql-ballerina:${stdlibSqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:persist-ballerina:${stdlibPersistVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mysql-ballerina:${stdlibMysqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mysql.driver-ballerina:${stdlibMysqlDriverVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mssql-ballerina:${stdlibMssqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mssql.driver-ballerina:${stdlibMssqlDriverVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:postgresql-ballerina:${stdlibPostgresqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:postgresql.driver-ballerina:${stdlibPostgresqlDriverVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:persist.sql-ballerina:${stdlibPersistSqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:persist.inmemory-ballerina:${stdlibPersistInmemoryVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:persist.googlesheets-ballerina:${stdlibPersistGoogleSheetVersion}"
        ballerinaStdLibs "io.ballerina.lib:persist.redis-ballerina:${stdlibPersistRedisVersion}"

        ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${stdlibFileVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${stdlibJwtVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
    }
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")
def persistSqlNativeVersion = "${persistSqlNativeVersion}"
def persistInMemoryNativeVersion = "${persistInMemoryNativeVersion}"
def persistGoogleSheetsNativeVersion = "${persistGoogleSheetsNativeVersion}"
def persistRedisNativeVersion = "${persistRedisNativeVersion}"

release {
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn = subprojects.test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        xml.destination(new File("${buildDir}/reports/jacoco/report.xml"))
        html.destination(new File("${buildDir}/reports/jacoco/report.html"))
        csv.destination(new File("${buildDir}/reports/jacoco/report.csv"))
    }

    onlyIf = {
        true
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        def file = new File("$project.rootDir/persist-cli/src/main/resources/version.properties")
        file.withWriter('UTF-8') {
            it.writeLine 'version = ${project.version}'
            it.writeLine 'persistSqlVersion = ' + persistSqlNativeVersion.toString()
            it.writeLine 'persistInMemoryVersion = ' + persistInMemoryNativeVersion.toString()
            it.writeLine 'persistGoogleSheetsVersion = ' + persistGoogleSheetsNativeVersion.toString()
            it.writeLine 'persistRedisVersion = ' + persistRedisNativeVersion.toString()
        }
    }
}

classes {
    dependsOn createProperties
}

task copyPersistTool(type: Copy) {
    into "$project.rootDir/target"
    into("ballerina-distribution/bre/lib") {
        from "$project.rootDir/persist-cli/build/libs/persist-cli-${project.version}.jar"
    }
}

copyPersistTool.dependsOn ":persist-cli-tests:build"
copyPersistTool.dependsOn ":persist-cli:build"

build.dependsOn copyPersistTool
build.dependsOn ":examples:build"

publish.dependsOn build
